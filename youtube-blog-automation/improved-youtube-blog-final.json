{
  "name": "YouTube Blog Enhanced Final",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "youtube-blog-enhanced-final",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "enhanced-webhook-trigger",
      "name": "Enhanced Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [16, 304],
      "webhookId": "enhanced-webhook-trigger"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced input validation and immediate response\nconst body = $input.first().json.body;\n\n// Validate required fields\nif (!body || !body.pageId || !body.videoId) {\n  return {\n    statusCode: 400,\n    error: 'Missing required fields: pageId and videoId are required',\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Return immediate acknowledgment\nreturn {\n  statusCode: 200,\n  message: 'Blog generation started',\n  workflowId: 'youtube-blog-enhanced-final',\n  requestId: `${body.pageId}-${Date.now()}`,\n  estimatedCompletionTime: '2-3 minutes',\n  status: 'processing',\n  timestamp: new Date().toISOString(),\n  data: {\n    pageId: body.pageId,\n    videoId: body.videoId,\n    triggeredBy: body.triggeredBy || 'unknown',\n    workflowVersion: 'enhanced'\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [240, 192],
      "id": "validate-and-respond",
      "name": "Validate and Respond"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "immediate-webhook-response",
      "name": "Immediate Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [448, 192]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.statusCode }}",
              "value2": 200
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [656, 304],
      "id": "check-validation-success",
      "name": "Check Validation Success"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "={{ $('Enhanced Webhook Trigger').item.json.body.pageId }}",
          "mode": "id"
        }
      },
      "id": "get-notion-data-enhanced",
      "name": "Get Notion Data Enhanced",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [864, 224],
      "credentials": {
        "notionApi": {
          "id": "kCKFfrau35Gf4PvW",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced YouTube info extraction with multiple fallback strategies\nconst notionData = $input.first().json;\nconst originalBody = $('Enhanced Webhook Trigger').item.json.body;\n\n// Enhanced extraction function with comprehensive fallback\nfunction extractYouTubeInfo(data, fallbackVideoId) {\n  const extractors = [\n    // Direct property extractors\n    d => d.property_url,\n    d => d.properties?.URL?.url,\n    d => d.properties?.url?.url,\n    d => d.properties?.링크?.url,\n    d => d.properties?.[\"원본 영상\"]?.url,\n    \n    // Search all properties for URL-like values\n    d => {\n      const props = d.properties || {};\n      for (const [key, value] of Object.entries(props)) {\n        if (value?.url && typeof value.url === 'string' && value.url.includes('youtube.com')) {\n          return value.url;\n        }\n      }\n      return null;\n    },\n    \n    // Last resort: construct from video ID\n    d => fallbackVideoId ? `https://www.youtube.com/watch?v=${fallbackVideoId}` : null\n  ];\n\n  for (let i = 0; i < extractors.length; i++) {\n    try {\n      const url = extractors[i](data);\n      if (url && typeof url === 'string') {\n        const videoId = extractVideoId(url);\n        if (videoId) {\n          return {\n            success: true,\n            youtubeUrl: url,\n            videoId: videoId,\n            extractorUsed: i,\n            source: i === extractors.length - 1 ? 'fallback' : 'notion'\n          };\n        }\n      }\n    } catch (error) {\n      console.log(`Extractor ${i} failed:`, error.message);\n    }\n  }\n\n  return {\n    success: false,\n    error: 'No valid YouTube URL found',\n    debugInfo: {\n      availableProperties: Object.keys(data.properties || {}),\n      directProperties: Object.keys(data).filter(k => k.startsWith('property_')),\n      fallbackVideoId: fallbackVideoId\n    }\n  };\n}\n\nfunction extractVideoId(url) {\n  const patterns = [\n    /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/,\n    /youtube\\.com\\/embed\\/([^&\\n?#]+)/,\n    /youtube\\.com\\/v\\/([^&\\n?#]+)/\n  ];\n  \n  for (const pattern of patterns) {\n    const match = url.match(pattern);\n    if (match && match[1]) {\n      return match[1];\n    }\n  }\n  return null;\n}\n\n// Enhanced title and channel extraction\nfunction extractMetadata(data) {\n  const titleExtractors = [\n    d => d.property_,\n    d => d.name,\n    d => d.properties?.제목?.title?.[0]?.text?.content,\n    d => d.properties?.Title?.title?.[0]?.text?.content,\n    d => '제목 없음'\n  ];\n  \n  const channelExtractors = [\n    d => d.property_rss,\n    d => d.properties?.채널명?.rich_text?.[0]?.text?.content,\n    d => d.properties?.[\"RSS소스\"]?.select?.name,\n    d => '채널명 없음'\n  ];\n  \n  let title = '제목 없음';\n  let channelName = '채널명 없음';\n  \n  for (const extractor of titleExtractors) {\n    try {\n      const result = extractor(data);\n      if (result && typeof result === 'string' && result !== '제목 없음') {\n        title = result;\n        break;\n      }\n    } catch (e) {}\n  }\n  \n  for (const extractor of channelExtractors) {\n    try {\n      const result = extractor(data);\n      if (result && typeof result === 'string' && result !== '채널명 없음') {\n        channelName = result;\n        break;\n      }\n    } catch (e) {}\n  }\n  \n  return { title, channelName };\n}\n\n// Extract transcript if available\nfunction extractTranscript(data) {\n  const transcriptExtractors = [\n    d => d.properties?.자막원문?.rich_text?.[0]?.text?.content,\n    d => d.properties?.transcript?.rich_text?.[0]?.text?.content,\n    d => d.properties?.Transcript?.rich_text?.[0]?.text?.content\n  ];\n  \n  for (const extractor of transcriptExtractors) {\n    try {\n      const transcript = extractor(data);\n      if (transcript && transcript.length > 100) {\n        return {\n          hasTranscript: true,\n          transcript: transcript,\n          source: 'cached'\n        };\n      }\n    } catch (e) {}\n  }\n  \n  return {\n    hasTranscript: false,\n    transcript: null,\n    source: 'none'\n  };\n}\n\n// Main execution\ntry {\n  const youtubeInfo = extractYouTubeInfo(notionData, originalBody.videoId);\n  const metadata = extractMetadata(notionData);\n  const transcriptInfo = extractTranscript(notionData);\n  \n  const result = {\n    ...youtubeInfo,\n    ...metadata,\n    ...transcriptInfo,\n    pageId: originalBody.pageId,\n    triggeredBy: originalBody.triggeredBy || 'unknown',\n    timestamp: new Date().toISOString()\n  };\n  \n  return result;\n  \n} catch (error) {\n  return {\n    success: false,\n    error: error.message,\n    stack: error.stack,\n    pageId: originalBody.pageId,\n    videoId: originalBody.videoId,\n    timestamp: new Date().toISOString()\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1072, 224],\n      "id": "enhanced-extract-info",
      "name": "Enhanced Extract Info"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1280, 224],
      "id": "check-extraction-success",
      "name": "Check Extraction Success"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.hasTranscript }}",
              "value2": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1488, 144],
      "id": "check-cached-transcript",
      "name": "Check Cached Transcript"
    },
    {
      "parameters": {
        "youtubeId": "={{ $json.videoId }}",
        "preferCapLang": "ko"
      },
      "id": "fetch-missing-transcript",
      "name": "Fetch Missing Transcript",
      "type": "n8n-nodes-bandi-youtube-transcript.youtubeTranscriptNode",
      "typeVersion": 1,
      "position": [1696, 304],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Merge transcript data and prepare for blog generation\nconst extractedInfo = $('Enhanced Extract Info').item.json;\nconst cachedTranscript = extractedInfo.hasTranscript ? extractedInfo.transcript : null;\nconst fetchedTranscript = $input.first().json?.transcript || null;\n\n// Use cached transcript if available, otherwise use fetched\nconst finalTranscript = cachedTranscript || fetchedTranscript;\n\nif (!finalTranscript || finalTranscript.length < 50) {\n  // Fallback for when no transcript is available\n  return {\n    ...extractedInfo,\n    transcript: `제목 기반 콘텐츠: ${extractedInfo.title}\\n\\n이 영상에 대한 자막을 가져올 수 없어 제목과 채널 정보를 바탕으로 블로그 글을 작성합니다.`,\n    transcriptSource: 'fallback',\n    transcriptLength: 0,\n    readyForBlogGeneration: true\n  };\n}\n\nreturn {\n  ...extractedInfo,\n  transcript: finalTranscript,\n  transcriptSource: cachedTranscript ? 'cached' : 'fresh',\n  transcriptLength: finalTranscript.length,\n  readyForBlogGeneration: true\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1904, 224],
      "id": "merge-transcript-data",
      "name": "Merge Transcript Data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "당신은 이미커피 대표 hovoo입니다.\n\n15년간 카페 4개 매장을 운영하며 F&B 브랜딩 전문가로 활동했습니다.\n동시에 AI 자동화 전문가로서 GPTers 커뮤니티에서 'AI 감성 브랜딩 시스템' 스터디를 운영하고 있습니다.\n\nYouTube 영상 자막을 바탕으로 당신의 경험과 통찰이 담긴 블로그 글을 작성하세요.\n\n[영상 정보]\n제목: {{ $json.title }}\n채널: {{ $json.channelName }}\nURL: {{ $json.youtubeUrl }}\nVideo ID: {{ $json.videoId }}\n자막 소스: {{ $json.transcriptSource }}\n\n[자막 전문]\n{{ $json.transcript }}\n\n[당신의 배경]\n- 이미커피 대표, 15년 F&B 운영 경험\n- 카페 4개 매장 + 베이커리 운영 중\n- AI 자동화 전문가 (n8n 워크플로우 5개 운영)\n- GPTers 스터디장, \"AI 감성 브랜딩 시스템\" 운영\n- 자영업자 대상 AI 교육 강의\n- 도메인: blog.imiwork.com\n\n[작성 스타일]\n1. 실무 경험 기반의 구체적 통찰\n2. 오프라인 비즈니스 × AI 융합 관점\n3. 자영업자/소상공인을 위한 실용적 조언\n4. 15년 카페 운영 경험에서 나오는 깊이\n5. 친근하지만 전문적인 어투\n6. 마크다운 형식, H1 제목 하나, H2/H3 소제목 구조화\n7. 최소 2500자 이상의 완전한 글\n\n[글 구조]\n- 도입: \"15년 카페를 운영하며 느낀...\" 식으로 경험 기반 시작\n- 본문: 영상 내용 + 본인 경험 융합\n- 실전 팁: F&B/AI 관점에서의 구체적 실행법\n- 결론: 독자의 비즈니스 성장을 위한 행동 유도\n\n중요: 영상 내용을 단순 요약하지 말고, 당신의 15년 경험과 AI 전문성으로 재해석해서 독자에게 가치 있는 통찰을 제공하는 완전한 블로그 글을 작성하세요.",
        "batching": {}
      },
      "id": "enhanced-blog-generation",
      "name": "Enhanced Blog Generation",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [2112, 224]
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-001",
        "options": {
          "maxOutputTokens": 4000,
          "temperature": 0.6
        }
      },
      "id": "gemini-blog-model",
      "name": "Gemini Blog Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [2192, 432],
      "credentials": {
        "googlePalmApi": {
          "id": "SO4eLSfcE2Z5kkss",
          "name": "hovoo Google Gemini Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "# SEO 최적화 메타데이터 생성 (Enhanced)\n\n다음 블로그 글을 분석하여 SEO에 최적화된 메타데이터를 JSON 형식으로 생성해 주세요.\n\n**원본 블로그 글**: {{ $json.text }}\n**채널**: {{ $('Merge Transcript Data').item.json.channelName }}\n**영상 제목**: {{ $('Merge Transcript Data').item.json.title }}\n**자막 길이**: {{ $('Merge Transcript Data').item.json.transcriptLength }}자\n**자막 소스**: {{ $('Merge Transcript Data').item.json.transcriptSource }}\n\n## 생성할 메타데이터:\n\n1. **title**: SEO 친화적 제목 (50-60자, hovoo 브랜드 포함)\n2. **meta_description**: 메타 설명 (140-160자, 클릭 유도)\n3. **tags**: 관련 태그 배열 (6-10개, 브랜드 키워드 우선)\n4. **slug**: URL 친화적 슬러그 (영문, 하이픈 사용, 날짜 포함)\n5. **excerpt**: 요약문 (200-250자, 글의 핵심 내용)\n6. **featured_image_alt**: 대표 이미지 alt 텍스트\n7. **keywords**: 타겟 키워드 배열 (롱테일 키워드 포함)\n8. **category**: 글 카테고리 (hovoo 블로그 맞춤)\n9. **readingTime**: 예상 읽기 시간 (분)\n10. **contentQuality**: 콘텐츠 품질 점수 (1-10)\n\n## 키워드 전략 (우선순위별):\n- **브랜드**: 이미커피, hovoo, AI자동화\n- **Primary**: 카페 운영, n8n 워크플로우, F&B 브랜딩\n- **Secondary**: 자영업자, 소상공인, AI 활용\n- **Long-tail**: 구체적 기능/방법 관련 키워드\n\n## 슬러그 규칙:\n- hovoo-[주제]-[특징]-2408 형식\n- 예: hovoo-ai-automation-cafe-branding-2408\n\n## 고려사항:\n- hovoo의 전문성 영역 강조\n- 타겟 독자: 자영업자, 소상공인, AI 활용 관심자\n- 검색 의도: 실무 적용 가능한 정보 추구\n- 브랜드 일관성 유지\n\n**반드시 유효한 JSON 형식으로만 응답해 주세요.**",
        "batching": {}
      },
      "id": "enhanced-seo-optimization",
      "name": "Enhanced SEO Optimization", 
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [2320, 224]
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-001",
        "options": {
          "maxOutputTokens": 2000,
          "temperature": 0.3
        }
      },
      "id": "gemini-seo-model",
      "name": "Gemini SEO Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [2400, 432],
      "credentials": {
        "googlePalmApi": {
          "id": "SO4eLSfcE2Z5kkss",
          "name": "hovoo Google Gemini Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced JSON parsing with comprehensive error handling\nconst rawText = $input.first().json.text;\nconst originalData = $('Merge Transcript Data').item.json;\n\nfunction parseEnhancedJSON(text) {\n  let jsonText = text;\n\n  // Extract JSON from various formats\n  if (text.includes('```json')) {\n    const start = text.indexOf('```json') + 7;\n    const end = text.lastIndexOf('```');\n    jsonText = text.substring(start, end).trim();\n  } else if (text.includes('{')) {\n    const start = text.indexOf('{');\n    const end = text.lastIndexOf('}');\n    if (start !== -1 && end !== -1 && end > start) {\n      jsonText = text.substring(start, end + 1);\n    }\n  }\n\n  try {\n    const data = JSON.parse(jsonText);\n    \n    // Enhanced validation and defaults with hovoo branding\n    const result = {\n      title: data.title || `hovoo의 ${originalData.channelName} 영상 분석`,\n      meta_description: data.meta_description || `이미커피 대표 hovoo의 15년 F&B 경험과 AI 전문성으로 해석한 ${originalData.title} 영상 분석`,\n      tags: Array.isArray(data.tags) ? data.tags : ['이미커피', 'hovoo', 'AI자동화', '카페운영'],\n      slug: data.slug || generateSlug(originalData.title),\n      excerpt: data.excerpt || data.meta_description || '실무 경험 기반의 가치 있는 통찰',\n      featured_image_alt: data.featured_image_alt || `hovoo 이미커피 ${originalData.channelName} 영상 분석`,\n      keywords: Array.isArray(data.keywords) ? data.keywords : ['카페 운영 노하우', 'AI 자동화', 'hovoo 경험', '이미커피 시스템'],\n      category: data.category || 'AI 실무 활용',\n      readingTime: data.readingTime || Math.ceil($('Enhanced Blog Generation').item.json.text.length / 1000),\n      contentQuality: data.contentQuality || 8\n    };\n\n    // Enhanced slug processing\n    result.slug = cleanSlug(result.slug);\n    \n    // Ensure hovoo brand tags are present\n    if (!result.tags.includes('이미커피')) {\n      result.tags.unshift('이미커피');\n    }\n    if (!result.tags.includes('hovoo')) {\n      result.tags.unshift('hovoo');\n    }\n    \n    // Limit tags to 10\n    result.tags = result.tags.slice(0, 10);\n    \n    // Add processing metadata\n    result.metadata = {\n      processed_at: new Date().toISOString(),\n      source_channel: originalData.channelName,\n      video_id: originalData.videoId,\n      transcript_source: originalData.transcriptSource,\n      transcript_length: originalData.transcriptLength,\n      blog_length: $('Enhanced Blog Generation').item.json.text.length,\n      parsing_success: true\n    };\n    \n    return result;\n\n  } catch (error) {\n    // Comprehensive fallback with hovoo branding\n    return {\n      title: `hovoo가 분석하는 ${originalData.channelName} - ${originalData.title}`,\n      meta_description: `이미커피 대표 hovoo의 15년 F&B 경험으로 해석한 ${originalData.channelName} 채널의 ${originalData.title} 영상 분석과 실무 적용 방안`,\n      tags: ['이미커피', 'hovoo', 'AI자동화', '카페운영', 'F&B브랜딩', originalData.channelName.replace(/\\s/g, '')],\n      slug: generateSlug(originalData.title),\n      excerpt: `${originalData.channelName}의 ${originalData.title} 영상을 hovoo의 15년 카페 운영 경험과 AI 전문성으로 분석한 실무 활용 가이드입니다.`,\n      featured_image_alt: `hovoo 이미커피 ${originalData.channelName} 영상 분석`,\n      keywords: ['카페 운영 노하우', 'AI 자동화 활용', 'hovoo 실무 경험', '이미커피 시스템', 'F&B 브랜딩'],\n      category: 'AI 실무 활용',\n      readingTime: Math.ceil($('Enhanced Blog Generation').item.json.text.length / 1000),\n      contentQuality: 7,\n      metadata: {\n        processed_at: new Date().toISOString(),\n        source_channel: originalData.channelName,\n        video_id: originalData.videoId,\n        transcript_source: originalData.transcriptSource,\n        parsing_success: false,\n        parsing_error: error.message,\n        fallback_used: true\n      }\n    };\n  }\n}\n\nfunction generateSlug(title) {\n  return 'hovoo-' + \n    title.toLowerCase()\n    .replace(/[^a-z0-9가-힣\\s-]/g, '')\n    .replace(/[가-힣]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-|-$/g, '')\n    .substring(0, 40) + \n    '-2408';\n}\n\nfunction cleanSlug(slug) {\n  return slug.toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-|-$/g, '')\n    .substring(0, 50);\n}\n\nreturn parseEnhancedJSON(rawText);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2528, 224],
      "id": "enhanced-parse-seo-json",
      "name": "Enhanced Parse SEO JSON"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "251d0f53623d8158b023d994a1e58122",
          "mode": "id"
        },
        "title": "={{ $json.title }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "제목",
              "type": "title",
              "titleValue": "={{ $json.title }}"
            },
            {
              "key": "본문",
              "type": "rich_text",
              "textContent": "={{ $('Enhanced Blog Generation').item.json.text }}"
            },
            {
              "key": "원본 영상",
              "type": "url",
              "urlValue": "={{ $('Merge Transcript Data').item.json.youtubeUrl }}"
            },
            {
              "key": "채널명",
              "type": "rich_text",
              "textContent": "={{ $('Merge Transcript Data').item.json.channelName }}"
            },
            {
              "key": "URL 슬러그",
              "type": "rich_text",
              "textContent": "={{ $json.slug }}"
            },
            {
              "key": "메타 설명",
              "type": "rich_text",
              "textContent": "={{ $json.meta_description }}"
            },
            {
              "key": "태그",
              "type": "multi_select",
              "multiSelectValue": "={{ $json.tags }}"
            },
            {
              "key": "카테고리",
              "type": "select",
              "selectValue": "={{ $json.category }}"
            },
            {
              "key": "상태",
              "type": "select",
              "selectValue": "생성완료"
            },
            {
              "key": "작성일",
              "type": "date",
              "date": "={{ $now }}"
            },
            {
              "key": "읽기시간",
              "type": "number",
              "numberValue": "={{ $json.readingTime }}"
            },
            {
              "key": "품질점수",
              "type": "number",
              "numberValue": "={{ $json.contentQuality }}"
            },
            {
              "key": "자막소스",
              "type": "select",
              "selectValue": "={{ $('Merge Transcript Data').item.json.transcriptSource }}"
            },
            {
              "key": "처리시간",
              "type": "rich_text",
              "textContent": "={{ Math.round(($now - new Date($('Enhanced Webhook Trigger').item.json.timestamp || Date.now())) / 1000) }}초"
            }
          ]
        },
        "options": {}
      },
      "id": "enhanced-save-blog-db",
      "name": "Enhanced Save to Blog DB",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [2736, 224],
      "credentials": {
        "notionApi": {
          "id": "kCKFfrau35Gf4PvW",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Enhanced Webhook Trigger').item.json.body.chatId || '7830356405' }}",
        "text": "🎉 *YouTube 블로그 자동화 완료!* (Enhanced)\n\n📝 **제목**: {{ $json.title }}\n📊 **SEO 점수**: {{ $('Enhanced Parse SEO JSON').item.json.contentQuality }}/10\n📈 **읽기 시간**: {{ $('Enhanced Parse SEO JSON').item.json.readingTime }}분\n🏷️ **태그**: {{ $('Enhanced Parse SEO JSON').item.json.tags.slice(0,5).join(', ') }}\n📁 **카테고리**: {{ $('Enhanced Parse SEO JSON').item.json.category }}\n\n✅ **처리 완료 항목**:\n• YouTube 영상 정보 수집 ✓\n• 자막/전사 내용 추출 ({{ $('Merge Transcript Data').item.json.transcriptSource }}) ✓\n• hovoo 페르소나 블로그 글 생성 ({{ $('Enhanced Blog Generation').item.json.text.length }}자) ✓\n• SEO 메타데이터 최적화 ✓\n• Notion 블로그 DB 저장 ✓\n\n🔗 **슬러그**: `{{ $('Enhanced Parse SEO JSON').item.json.slug }}`\n⚡ **처리시간**: {{ $('Enhanced Parse SEO JSON').item.json.metadata.processed_at ? Math.round((new Date($('Enhanced Parse SEO JSON').item.json.metadata.processed_at) - new Date($('Enhanced Webhook Trigger').item.json.timestamp || Date.now())) / 1000) : 'N/A' }}초\n\n💡 **다음 단계**: Ghost 블로그 자동 발행을 위해 별도 워크플로우를 실행해 주세요.\n\n---\n*이미커피 AI 자동화 시스템 Enhanced | hovoo*",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "enhanced-success-notification",
      "name": "Enhanced Success Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2944, 224],
      "webhookId": "enhanced-success-notification",
      "credentials": {
        "telegramApi": {
          "id": "hIo5i77YKdu9Rs8g",
          "name": "youtube imi Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Enhanced Webhook Trigger').item.json.body.chatId || '7830356405' }}",
        "text": "🚨 *YouTube 정보 추출 실패*\n\n❌ **오류**: {{ $json.error }}\n📄 **페이지 ID**: {{ $json.pageId }}\n🎬 **비디오 ID**: {{ $json.videoId }}\n\n🔍 **디버그 정보**:\n{{ JSON.stringify($json.debugInfo, null, 2) }}\n\n🛠️ **해결 방안**:\n1. Notion 페이지의 YouTube URL 필드 확인\n2. 영상 ID가 올바른지 확인\n3. 수동으로 다시 시도\n\n---\n*이미커피 AI 자동화 시스템 Enhanced | Error Handler*",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "extraction-error-notification",
      "name": "Extraction Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1280, 464],
      "webhookId": "extraction-error-notification",
      "credentials": {
        "telegramApi": {
          "id": "hIo5i77YKdu9Rs8g",
          "name": "youtube imi Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Validate and Respond').item.json.data?.chatId || '7830356405' }}",
        "text": "❌ *입력 데이터 검증 실패*\n\n**오류**: {{ $json.error }}\n**상태 코드**: {{ $json.statusCode }}\n**시간**: {{ $json.timestamp }}\n\n필수 필드 (pageId, videoId)를 확인해주세요.",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "validation-error-notification",
      "name": "Validation Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [656, 544],
      "webhookId": "validation-error-notification",
      "credentials": {
        "telegramApi": {
          "id": "hIo5i77YKdu9Rs8g",
          "name": "youtube imi Telegram account"
        }
      }
    }
  ],
  "connections": {
    "Enhanced Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validate and Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate and Respond": {
      "main": [
        [
          {
            "node": "Immediate Webhook Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Validation Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Validation Success": {
      "main": [
        [
          {
            "node": "Get Notion Data Enhanced",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validation Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Data Enhanced": {
      "main": [
        [
          {
            "node": "Enhanced Extract Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Extract Info": {
      "main": [
        [
          {
            "node": "Check Extraction Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Extraction Success": {
      "main": [
        [
          {
            "node": "Check Cached Transcript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extraction Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Cached Transcript": {
      "main": [
        [
          {
            "node": "Merge Transcript Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fetch Missing Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Missing Transcript": {
      "main": [
        [
          {
            "node": "Merge Transcript Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Transcript Data": {
      "main": [
        [
          {
            "node": "Enhanced Blog Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Blog Generation": {
      "main": [
        [
          {
            "node": "Enhanced SEO Optimization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Blog Model": {
      "ai_languageModel": [
        [
          {
            "node": "Enhanced Blog Generation",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced SEO Optimization": {
      "main": [
        [
          {
            "node": "Enhanced Parse SEO JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini SEO Model": {
      "ai_languageModel": [
        [
          {
            "node": "Enhanced SEO Optimization",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Parse SEO JSON": {
      "main": [
        [
          {
            "node": "Enhanced Save to Blog DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Save to Blog DB": {
      "main": [
        [
          {
            "node": "Enhanced Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "503b3d8b44115e5921e2e4e1edcde177dde00c303a77361802e2da13d7103e31"
  }
}