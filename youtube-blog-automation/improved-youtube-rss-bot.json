{
  "name": "YouTube RSS Bot Enhanced",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyHour"
            }
          ]
        },
        "feedUrl": "https://www.youtube.com/feeds/videos.xml?channel_id=UCDLlMjELbrJdETmSiAB68AA"
      },
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [-96, -48],
      "id": "309acbd4-ab6d-4741-8df2-c667fb966897",
      "name": "시민개발자 구씨"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "title-id",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "link-id", 
              "name": "link",
              "value": "={{ $json.link.includes('/shorts/') ? $json.link.replace('youtube.com/shorts/', 'youtube.com/watch?v=') : $json.link }}",
              "type": "string"
            },
            {
              "id": "videoId-id",
              "name": "videoId",
              "value": "={{ $json.link.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/)?.[1] || 'no-video-id' }}",
              "type": "string"
            },
            {
              "id": "pubDate-id",
              "name": "pubDate", 
              "value": "={{ $json.pubDate }}",
              "type": "string"
            },
            {
              "id": "author-id",
              "name": "author",
              "value": "={{ $json.author }}",
              "type": "string"
            },
            {
              "id": "rss-source-id",
              "name": "rss_source",
              "value": "={{ $json.author.includes('구씨') ? '시민개발자 구씨' : $json.author.includes('Lenny') ? 'Lenny\\'s Podcast' : $json.author.includes('언더스텐딩딩') ? '언더스텐딩딩' : $json.author.includes('디자인') ? '디자인하는AI' : $json.author }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [192, 192],
      "id": "enhanced-edit-fields",
      "name": "Enhanced Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.videoId }}",
              "operation": "isNotEqual",
              "value2": "no-video-id"
            },
            {
              "value1": "={{ $json.link }}",
              "operation": "contains",
              "value2": "youtube.com"
            }
          ]
        },
        "combineOperation": "all"
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [400, 192],
      "id": "validate-video-data",
      "name": "Validate Video Data"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced YouTube transcript extraction with retry logic\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  const { videoId, title, link } = item.json;\n  let transcriptResult = {\n    videoId,\n    title,\n    link,\n    transcriptStatus: 'pending'\n  };\n  \n  try {\n    // Check if video ID is valid\n    if (!videoId || videoId === 'no-video-id') {\n      throw new Error('Invalid video ID');\n    }\n    \n    // This will be replaced by actual YouTube Transcript node\n    // For now, we'll pass through the data\n    transcriptResult.transcriptStatus = 'ready';\n    transcriptResult.needsTranscript = true;\n    \n  } catch (error) {\n    transcriptResult.transcriptStatus = 'failed';\n    transcriptResult.error = error.message;\n    transcriptResult.needsTranscript = false;\n  }\n  \n  results.push({ json: transcriptResult });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [608, 192],
      "id": "prepare-transcript",
      "name": "Prepare for Transcript"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needsTranscript }}",
              "value2": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [816, 192],
      "id": "needs-transcript-check",
      "name": "Needs Transcript Check"
    },
    {
      "parameters": {
        "youtubeId": "={{ $json.videoId }}",
        "preferCapLang": "ko"
      },
      "type": "n8n-nodes-bandi-youtube-transcript.youtubeTranscriptNode",
      "typeVersion": 1,
      "position": [1024, 128],
      "id": "youtube-transcript-enhanced",
      "name": "YouTube Transcript Enhanced",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced error handling for transcript failures\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  try {\n    if (item.json.transcript && item.json.transcript.length > 50) {\n      // Successful transcript\n      results.push({\n        json: {\n          ...item.json,\n          transcriptStatus: 'success',\n          transcriptLength: item.json.transcript.length,\n          hasTranscript: true\n        }\n      });\n    } else {\n      // Failed or empty transcript\n      results.push({\n        json: {\n          ...item.json,\n          transcript: `자막을 추출할 수 없어 제목과 설명을 기반으로 요약합니다: ${item.json.title}`,\n          transcriptStatus: 'fallback',\n          transcriptLength: 0,\n          hasTranscript: false\n        }\n      });\n    }\n  } catch (error) {\n    // Error handling\n    results.push({\n      json: {\n        ...item.json,\n        transcript: `오류로 인해 기본 정보만 저장됩니다: ${item.json.title}`,\n        transcriptStatus: 'error',\n        transcriptLength: 0,\n        hasTranscript: false,\n        error: error.message\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1232, 192],
      "id": "handle-transcript-result",
      "name": "Handle Transcript Result"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "다음 YouTube 영상 자막을 한국어로 요약하세요.\n\n자막 내용:\n{{ $json.transcript }}\n\n요약 지침:\n먼저 전체 자막을 읽고 핵심 주제와 결론을 파악한 후, 다음 순서로 요약하세요:\n\n1. 전체 내용의 핵심 주제 1-2문장으로 시작\n2. 주요 논점이나 사례를 2-3개 선별하여 설명\n3. 화자의 결론이나 핵심 메시지로 마무리\n\n요약 요구사항:\n- 전체 800자 이내 엄수 (중간에 끊기지 않도록)\n- 시작부터 끝까지 완결된 요약 작성\n- 구체적인 숫자나 예시 포함\n- 자연스러운 한국어 문체\n- 영상 전체의 맥락과 결론 반영\n\n작성 규칙:\n- 이중 중괄호나 파이프 문자 등 템플릿 문법 사용 금지\n- 순수 한국어 텍스트만 작성  \n- 마크다운 헤더나 특수문자 사용 금지\n- 문단 구분은 줄바꿈으로만 처리\n\n중요: 반드시 800자 이내에서 완결된 요약을 작성하고, 중간에 끊기지 않도록 주의하세요.",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [1440, 192],
      "id": "enhanced-llm-chain",
      "name": "Enhanced LLM Chain"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-001",
        "options": {
          "maxOutputTokens": 300,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [1520, 400],
      "id": "gemini-model-enhanced",
      "name": "Gemini Model Enhanced",
      "credentials": {
        "googlePalmApi": {
          "id": "SO4eLSfcE2Z5kkss",
          "name": "hovoo Google Gemini Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "23fd0f53-623d-81fe-a9cb-fda36d562a91",
          "mode": "id"
        },
        "title": "={{ $('Enhanced Edit Fields').item.json.title }}",
        "simple": false,
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "URL|url",
              "urlValue": "={{ $('Enhanced Edit Fields').item.json.link }}"
            },
            {
              "key": "채널명|rich_text",
              "textContent": "={{ $('Enhanced Edit Fields').item.json.author }}"
            },
            {
              "key": "게시일|date",
              "includeTime": false,
              "date": "={{ $('Enhanced Edit Fields').item.json.pubDate }}"
            },
            {
              "key": "수집일|date",
              "includeTime": false,
              "date": "={{ $now }}"
            },
            {
              "key": "RSS소스|select",
              "selectValue": "={{ $('Enhanced Edit Fields').item.json.rss_source }}"
            },
            {
              "key": "요약|rich_text",
              "textContent": "={{ $json.text }}"
            },
            {
              "key": "자막원문|rich_text",
              "textContent": "={{ $('Handle Transcript Result').item.json.transcript }}"
            },
            {
              "key": "자막상태|select",
              "selectValue": "={{ $('Handle Transcript Result').item.json.transcriptStatus }}"
            },
            {
              "key": "처리상태|select",
              "selectValue": "수집완료"
            },
            {
              "key": "VideoID|rich_text",
              "textContent": "={{ $('Enhanced Edit Fields').item.json.videoId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [1648, 192],
      "id": "enhanced-save-notion",
      "name": "Enhanced Save to Notion",
      "credentials": {
        "notionApi": {
          "id": "kCKFfrau35Gf4PvW",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "7830356405",
        "text": "🎬 새 YouTube 영상 수집완료 (Enhanced)\n\n📺 {{ $(\"Enhanced Edit Fields\").item.json.title }}\n👤 {{ $(\"Enhanced Edit Fields\").item.json.author }}\n📅 {{ $(\"Enhanced Edit Fields\").item.json.pubDate }}\n📊 자막 상태: {{ $('Handle Transcript Result').item.json.transcriptStatus }}\n\n📝 {{ $json.properties[\"요약\"].rich_text[0].plain_text }}\n\n✅ Notion 저장완료 (자막원문 포함)\n🔗 {{ $(\"Enhanced Edit Fields\").item.json.link }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "📝 블로그 글 생성",
                    "additionalFields": {
                      "callback_data": "=create_blog:{{ $json.id }}:{{ $('Enhanced Edit Fields').item.json.videoId }}"
                    }
                  },
                  {
                    "text": "🎥 영상 보기",
                    "additionalFields": {
                      "url": "={{ $('Enhanced Edit Fields').item.json.link }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "📋 Notion에서 보기",
                    "additionalFields": {
                      "url": "={{ $json.url }}"
                    }
                  },
                  {
                    "text": "🔄 자막 재추출",
                    "additionalFields": {
                      "callback_data": "=retry_transcript:{{ $json.id }}:{{ $('Enhanced Edit Fields').item.json.videoId }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1856, 192],
      "id": "enhanced-telegram-notification",
      "name": "Enhanced Telegram Notification",
      "webhookId": "enhanced-youtube-notification",
      "credentials": {
        "telegramApi": {
          "id": "hIo5i77YKdu9Rs8g",
          "name": "youtube imi Telegram account"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "callback_query"
        ],
        "additionalFields": {}
      },
      "id": "enhanced-telegram-trigger",
      "name": "Enhanced Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [208, 1072],
      "webhookId": "enhanced-telegram-callback",
      "credentials": {
        "telegramApi": {
          "id": "hIo5i77YKdu9Rs8g",
          "name": "youtube imi Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.callback_query.data }}",
              "operation": "startsWith",
              "value2": "=create_blog:"
            }
          ]
        }
      },
      "id": "check-blog-creation",
      "name": "Check Blog Creation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [416, 1072]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced callback data parsing with better error handling\nconst callbackData = $input.first().json.callback_query.data;\nconst cleanData = callbackData.startsWith('=') ? callbackData.substring(1) : callbackData;\nconst parts = cleanData.split(':');\n\ntry {\n  if (parts.length !== 3 || parts[0] !== 'create_blog') {\n    throw new Error(`Invalid callback data format: ${callbackData}`);\n  }\n\n  const notionPageId = parts[1];\n  const videoId = parts[2];\n  \n  // Validate inputs\n  if (!notionPageId || notionPageId.length < 10) {\n    throw new Error('Invalid Notion page ID');\n  }\n  \n  if (!videoId || videoId === 'no-video-id') {\n    throw new Error('Invalid video ID');\n  }\n\n  const userId = $input.first().json.callback_query.from.id;\n  const userName = $input.first().json.callback_query.from.first_name || 'User';\n  const messageId = $input.first().json.callback_query.message.message_id;\n  const chatId = $input.first().json.callback_query.message.chat.id;\n\n  return {\n    success: true,\n    notionPageId,\n    videoId,\n    userId,\n    userName,\n    messageId,\n    chatId,\n    callbackQueryId: $input.first().json.callback_query.id,\n    timestamp: new Date().toISOString(),\n    originalData: callbackData\n  };\n  \n} catch (error) {\n  return {\n    success: false,\n    error: error.message,\n    callbackQueryId: $input.first().json.callback_query.id,\n    userId: $input.first().json.callback_query.from.id,\n    chatId: $input.first().json.callback_query.message.chat.id,\n    originalData: callbackData\n  };\n}"
      },
      "id": "enhanced-parse-callback",
      "name": "Enhanced Parse Callback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [624, 1056]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [832, 1056],
      "id": "validate-callback-data",
      "name": "Validate Callback Data"
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $json.callbackQueryId }}",
        "additionalFields": {
          "text": "블로그 글 생성을 시작합니다... 📝"
        }
      },
      "id": "answer-callback-enhanced",
      "name": "Answer Callback Enhanced",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1040, 912],
      "webhookId": "enhanced-answer-callback",
      "credentials": {
        "telegramApi": {
          "id": "hIo5i77YKdu9Rs8g",
          "name": "youtube imi Telegram account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://n8n.imiwork.com/webhook-test/youtube-blog-enhanced-final",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"pageId\": \"{{ $json.notionPageId }}\",\n  \"videoId\": \"{{ $json.videoId }}\",\n  \"triggeredBy\": \"telegram\",\n  \"userId\": \"{{ $json.userId }}\",\n  \"userName\": \"{{ $json.userName }}\",\n  \"chatId\": \"{{ $json.chatId }}\",\n  \"messageId\": \"{{ $json.messageId }}\",\n  \"workflowVersion\": \"enhanced\",\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}",
        "options": {
          "timeout": 10000,
          "response": {
            "type": "json"
          }
        }
      },
      "id": "trigger-enhanced-blog-workflow",
      "name": "Trigger Enhanced Blog Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1248, 1056],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "=❌ 콜백 데이터 파싱 실패\n\n오류: {{ $json.error }}\n원본 데이터: {{ $json.originalData }}\n\n올바른 형식인지 확인해주세요.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "send-callback-error",
      "name": "Send Callback Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [832, 1312],
      "webhookId": "enhanced-callback-error",
      "credentials": {
        "telegramApi": {
          "id": "hIo5i77YKdu9Rs8g",
          "name": "youtube imi Telegram account"
        }
      }
    }
  ],
  "connections": {
    "시민개발자 구씨": {
      "main": [
        [
          {
            "node": "Enhanced Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Edit Fields": {
      "main": [
        [
          {
            "node": "Validate Video Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Video Data": {
      "main": [
        [
          {
            "node": "Prepare for Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Transcript": {
      "main": [
        [
          {
            "node": "Needs Transcript Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Transcript Check": {
      "main": [
        [
          {
            "node": "YouTube Transcript Enhanced",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Transcript Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YouTube Transcript Enhanced": {
      "main": [
        [
          {
            "node": "Handle Transcript Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Transcript Result": {
      "main": [
        [
          {
            "node": "Enhanced LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced LLM Chain": {
      "main": [
        [
          {
            "node": "Enhanced Save to Notion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Model Enhanced": {
      "ai_languageModel": [
        [
          {
            "node": "Enhanced LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Save to Notion": {
      "main": [
        [
          {
            "node": "Enhanced Telegram Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Telegram Trigger": {
      "main": [
        [
          {
            "node": "Check Blog Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Blog Creation": {
      "main": [
        [
          {
            "node": "Enhanced Parse Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Parse Callback": {
      "main": [
        [
          {
            "node": "Validate Callback Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Callback Data": {
      "main": [
        [
          {
            "node": "Answer Callback Enhanced",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Callback Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer Callback Enhanced": {
      "main": [
        [
          {
            "node": "Trigger Enhanced Blog Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "503b3d8b44115e5921e2e4e1edcde177dde00c303a77361802e2da13d7103e31"
  }
}