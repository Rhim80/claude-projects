{
  "name": "YouTube Blog Complete Final (Improved)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "youtube-blog-automation",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false,
          "rawBody": false
        }
      },
      "id": "webhook-trigger-stable",
      "name": "Webhook Trigger (Stable)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [16, 304],
      "webhookId": "stable-youtube-blog-webhook"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "={{ $json.body.pageId }}",
          "mode": "id"
        }
      },
      "id": "get-video-info-safe",
      "name": "Get Video Info from Notion (Safe)",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [240, 304],
      "credentials": {
        "notionApi": {
          "id": "kCKFfrau35Gf4PvW",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput",
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetween": 2000
    },
    {
      "parameters": {
        "jsCode": "// Enhanced YouTube 정보 추출 with error handling\nconst items = $input.all();\nconst results = [];\n\nfor (const item of items) {\n  try {\n    let youtubeUrl = '';\n    let title = '제목 없음';\n    let channelName = '채널명 없음';\n\n    // YouTube URL 추출 (다중 경로 지원)\n    if (item.json.properties?.URL?.url) {\n      youtubeUrl = item.json.properties.URL.url;\n    } else if (item.json.properties?.url?.url) {\n      youtubeUrl = item.json.properties.url.url;\n    } else if (item.json.property_url) {\n      youtubeUrl = item.json.property_url;\n    }\n\n    if (!youtubeUrl) {\n      throw new Error('YouTube URL을 찾을 수 없습니다.');\n    }\n\n    // 제목 추출\n    if (item.json.properties?.제목?.title?.[0]?.plain_text) {\n      title = item.json.properties.제목.title[0].plain_text;\n    } else if (item.json.property_) {\n      title = item.json.property_;\n    } else if (item.json.name) {\n      title = item.json.name;\n    }\n\n    // 채널명 추출  \n    if (item.json.properties?.채널명?.rich_text?.[0]?.plain_text) {\n      channelName = item.json.properties.채널명.rich_text[0].plain_text;\n    } else if (item.json.property_rss) {\n      channelName = item.json.property_rss;\n    }\n\n    // YouTube video ID 추출\n    let videoId = '';\n    const match = youtubeUrl.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/);\n    if (match && match[1]) {\n      videoId = match[1];\n    } else {\n      throw new Error('유효한 YouTube video ID를 추출할 수 없습니다.');\n    }\n\n    results.push({\n      json: {\n        videoId: videoId,\n        youtubeUrl: youtubeUrl,\n        title: title,\n        channelName: channelName,\n        success: true\n      }\n    });\n\n  } catch (error) {\n    console.error('YouTube 정보 추출 오류:', error.message);\n    results.push({\n      json: {\n        videoId: null,\n        youtubeUrl: null,\n        title: '오류: ' + error.message,\n        channelName: '추출 실패',\n        success: false,\n        error: error.message\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "extract-youtube-info-safe",
      "name": "Extract YouTube Info (Safe)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [464, 304]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.json.success }}",
              "operation": "equal",
              "value2": "true"
            }
          ]
        }
      },
      "id": "check-extraction-success",
      "name": "Check Extraction Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [688, 304]
    },
    {
      "parameters": {
        "youtubeId": "={{ $json.json.videoId }}",
        "preferCapLang": "ko"
      },
      "id": "get-youtube-transcript-safe",
      "name": "Get YouTube Transcript (Safe)",
      "type": "n8n-nodes-bandi-youtube-transcript.youtubeTranscriptNode",
      "typeVersion": 1,
      "position": [912, 240],
      "onError": "continueRegularOutput",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetween": 3000
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-001",
        "options": {
          "maxOutputTokens": 4000,
          "temperature": 0.6
        }
      },
      "id": "gemini-model-stable",
      "name": "Gemini for Article (Stable)",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [1200, 448],
      "credentials": {
        "googlePalmApi": {
          "id": "SO4eLSfcE2Z5kkss",
          "name": "hovoo Google Gemini Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "당신은 이미커피 대표 hovoo입니다.\n\n15년간 카페 4개 매장을 운영하며 F&B 브랜딩 전문가로 활동했습니다.\n동시에 AI 자동화 전문가로서 GPTers 커뮤니티에서 'AI 감성 브랜딩 시스템' 스터디를 운영하고 있습니다.\n\nYouTube 영상 자막을 바탕으로 당신의 경험과 통찰이 담긴 블로그 글을 작성하세요.\n\n[영상 정보]\n제목: {{ $('Extract YouTube Info (Safe)').first().json.json.title }}\n채널: {{ $('Extract YouTube Info (Safe)').first().json.json.channelName }}\nURL: {{ $('Extract YouTube Info (Safe)').first().json.json.youtubeUrl }}\nVideo ID: {{ $('Extract YouTube Info (Safe)').first().json.json.videoId }}\n\n[자막 전문]\n{{ $json.transcript }}\n\n[당신의 배경]\n- 이미커피 대표, 15년 F&B 운영 경험\n- 카페 4개 매장 + 베이커리 운영 중\n- AI 자동화 전문가 (n8n 워크플로우 7개 운영)\n- GPTers 스터디장, \"AI 감성 브랜딩 시스템\" 운영\n- 자영업자 대상 AI 교육 강의\n- 도메인: blog.imiwork.com\n\n[작성 스타일]\n1. 실무 경험 기반의 구체적 통찰\n2. 오프라인 비즈니스 × AI 융합 관점\n3. 자영업자/소상공인을 위한 실용적 조언\n4. 15년 카페 운영 경험에서 나오는 깊이\n5. 친근하지만 전문적인 어투\n6. 마크다운 형식, H1 제목 하나, H2/H3 소제목 구조화\n7. 최소 2500자 이상의 완전한 글\n\n[글 구조]\n- 도입: \"15년 카페를 운영하며 느낀...\" 식으로 경험 기반 시작\n- 본문: 영상 내용 + 본인 경험 융합\n- 실전 팁: F&B/AI 관점에서의 구체적 실행법\n- 결론: 독자의 비즈니스 성장을 위한 행동 유도\n\n영상 내용을 단순 요약하지 말고, 당신의 15년 경험과 AI 전문성으로 재해석해서 독자에게 가치 있는 통찰을 제공하는 완전한 블로그 글을 작성하세요.",
        "batching": {}
      },
      "id": "create-blog-article-safe",
      "name": "Create Blog Article (Safe)",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [1120, 240],
      "onError": "continueRegularOutput",
      "retryOnFail": true,
      "maxTries": 2,
      "waitBetween": 5000
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"message\": \"YouTube 블로그 자동화가 성공적으로 완료되었습니다.\",\n  \"data\": {\n    \"videoId\": \"{{ $('Extract YouTube Info (Safe)').first().json.json.videoId }}\",\n    \"contentLength\": {{ $('Create Blog Article (Safe)').item.json.text.length }},\n    \"processedAt\": \"{{ new Date().toISOString() }}\",\n    \"webhookUrl\": \"https://n8n.imiwork.com/webhook/youtube-blog-automation\"\n  },\n  \"meta\": {\n    \"version\": \"2.0\",\n    \"stable\": true\n  }\n}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "Content-Type": "application/json",
            "X-Workflow": "youtube-blog-automation",
            "X-Version": "stable-2.0"
          }
        }
      },
      "id": "webhook-response-stable",
      "name": "Stable Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [1344, 240]
    },
    {
      "parameters": {
        "chatId": "={{ $json.body.chatId || '7830356405' }}",
        "text": "🚨 **YouTube 블로그 자동화 오류 발생**\n\n❌ **오류 단계**: {{ $json.errorStep || '알 수 없음' }}\n🔍 **오류 내용**: {{ $json.error || '상세 정보 없음' }}\n📝 **페이지 ID**: {{ $json.body.pageId || 'N/A' }}\n🎬 **비디오 ID**: {{ $json.body.videoId || 'N/A' }}\n\n⏰ **발생 시간**: {{ new Date().toLocaleString('ko-KR') }}\n\n🔧 **조치 사항**: 관리자가 확인 중입니다.\n\n---\n*이미커피 AI 자동화 시스템 | Error Handler*",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-error-notification",
      "name": "Send Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [912, 496],
      "credentials": {
        "telegramApi": {
          "id": "hIo5i77YKdu9Rs8g",
          "name": "youtube imi Telegram account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"message\": \"YouTube 블로그 자동화 중 오류가 발생했습니다.\",\n  \"error\": {\n    \"step\": \"{{ $json.errorStep }}\",\n    \"message\": \"{{ $json.error }}\",\n    \"timestamp\": \"{{ new Date().toISOString() }}\"\n  },\n  \"data\": {\n    \"pageId\": \"{{ $json.body.pageId }}\",\n    \"videoId\": \"{{ $json.body.videoId }}\"\n  }\n}",
        "options": {
          "responseCode": 500,
          "responseHeaders": {
            "Content-Type": "application/json",
            "X-Workflow": "youtube-blog-automation",
            "X-Error": "true"
          }
        }
      },
      "id": "error-webhook-response",
      "name": "Error Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.5,
      "position": [1136, 496]
    }
  ],
  "connections": {
    "Webhook Trigger (Stable)": {
      "main": [
        [
          {
            "node": "Get Video Info from Notion (Safe)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video Info from Notion (Safe)": {
      "main": [
        [
          {
            "node": "Extract YouTube Info (Safe)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract YouTube Info (Safe)": {
      "main": [
        [
          {
            "node": "Check Extraction Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Extraction Success": {
      "main": [
        [
          {
            "node": "Get YouTube Transcript (Safe)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get YouTube Transcript (Safe)": {
      "main": [
        [
          {
            "node": "Create Blog Article (Safe)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini for Article (Stable)": {
      "ai_languageModel": [
        [
          {
            "node": "Create Blog Article (Safe)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create Blog Article (Safe)": {
      "main": [
        [
          {
            "node": "Stable Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Error Notification": {
      "main": [
        [
          {
            "node": "Error Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "stable-youtube-blog-automation",
    "version": "2.0.0",
    "description": "개선된 안정성과 에러 처리를 갖춘 YouTube 블로그 자동화 워크플로우"
  }
}